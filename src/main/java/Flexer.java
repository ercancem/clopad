public class Flexer extends freditor.Flexer {
    public static final Flexer instance = new Flexer();

    public static final int COMMENT_FIRST = -10;
    public static final int COMMENT_NEXT = 2;

    public static final int CHAR_CONSTANT_BEGIN = -11;
    public static final int CHAR_CONSTANT_INSIDE = 3;
    public static final int CHAR_CONSTANT_END = 4;

    public static final int STRING_LITERAL_BEGIN = -12;
    public static final int STRING_LITERAL_ESCAPE = 5;
    public static final int STRING_LITERAL_INSIDE = 6;
    public static final int STRING_LITERAL_END = 7;

    public static final int SIGN = -13;
    public static final int FIRST_DIGIT = -14;
    public static final int NEXT_DIGIT = 8;

    public static final int SYMBOL_FIRST = -15;
    public static final int SYMBOL_NEXT = 9;

    // auto-generated by freditor.FlexerGenerator
    public static final int F = -16;
    public static final int FA = 10;
    public static final int FAL = 11;
    public static final int FALS = 12;
    public static final int FALSE = 13;
    public static final int N = -17;
    public static final int NI = 14;
    public static final int NIL = 15;
    public static final int T = -18;
    public static final int TR = 16;
    public static final int TRU = 17;
    public static final int TRUE = 18;

    @Override
    public int pickColorForLexeme(int previousState, char firstCharacter, int endState) {
        switch (endState) {
            case ERROR:
                return 0xff0000;

            case COMMENT_FIRST:
            case COMMENT_NEXT:
                return 0x999988;

            case STRING_LITERAL_BEGIN:
            case STRING_LITERAL_ESCAPE:
            case STRING_LITERAL_INSIDE:
            case STRING_LITERAL_END:
                return 0x00a67a;

            case FIRST_DIGIT:
            case NEXT_DIGIT:

            case FALSE:
            case NIL:
            case TRUE:
                return 0x143dfb;

            case SYMBOL_FIRST:
            case SYMBOL_NEXT:
                if (firstCharacter == ':')
                    return 0x990073;

            case SIGN:
                if (previousState == OPENING_PAREN)
                    return 0xcc55ca;

            default:
                return 0x333333;
        }
    }

    @Override
    public boolean preventInsertion(int nextState) {
        switch (nextState) {
            case STRING_LITERAL_END:
            case CLOSING_PAREN:
            case CLOSING_BRACKET:
            case CLOSING_BRACE:
                return true;

            default:
                return false;
        }
    }

    @Override
    public String synthesizeOnInsert(int state, int nextState) {
        switch (state) {
            case STRING_LITERAL_BEGIN:
                return allowsSynthesis(nextState) ? "\"" : "";

            case OPENING_PAREN:
                return allowsSynthesis(nextState) ? ")" : "";

            case OPENING_BRACKET:
                return allowsSynthesis(nextState) ? "]" : "";

            case OPENING_BRACE:
                return allowsSynthesis(nextState) ? "}" : "";

            default:
                return "";
        }
    }

    private boolean allowsSynthesis(int nextState) {
        switch (nextState) {
            case END:
            case NEWLINE:
            case FIRST_SPACE:
            case NEXT_SPACE:
            case COMMENT_FIRST:
            case CLOSING_PAREN:
            case CLOSING_BRACKET:
            case CLOSING_BRACE:
                return true;

            default:
                return false;
        }
    }

    @Override
    protected int nextStateOrEnd(int currentState, char input) {
        switch (currentState) {
            default:
                throw new AssertionError("unhandled lexer state " + currentState + " for input " + input);

            case END:
            case ERROR:
            case NEWLINE:
            case CHAR_CONSTANT_END:
            case STRING_LITERAL_END:
                // auto-generated by freditor.FlexerGenerator
            case OPENING_PAREN:
            case CLOSING_PAREN:
            case OPENING_BRACKET:
            case CLOSING_BRACKET:
            case OPENING_BRACE:
            case CLOSING_BRACE:
                switch (input) {
                    default:
                        return ERROR;

                    case '\n':
                        return NEWLINE;

                    case ' ':
                    case ',':
                        return FIRST_SPACE;

                    case ';':
                        return COMMENT_FIRST;

                    case '\\':
                        return CHAR_CONSTANT_BEGIN;

                    case '\"':
                        return STRING_LITERAL_BEGIN;

                    case '+':
                    case '-':
                        return SIGN;

                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                        return FIRST_DIGIT;

                    case '!':
                    case '$':
                    case '&':
                    case '*':
                    case '.':
                    case '/':
                    case ':':
                    case '<':
                    case '=':
                    case '>':
                    case '?':

                    case 'A':
                    case 'B':
                    case 'C':
                    case 'D':
                    case 'E':
                    case 'F':
                    case 'G':
                    case 'H':
                    case 'I':
                    case 'J':
                    case 'K':
                    case 'L':
                    case 'M':
                    case 'N':
                    case 'O':
                    case 'P':
                    case 'Q':
                    case 'R':
                    case 'S':
                    case 'T':
                    case 'U':
                    case 'V':
                    case 'W':
                    case 'X':
                    case 'Y':
                    case 'Z':

                    case '_':

                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'g':
                    case 'h':
                    case 'i':
                    case 'j':
                    case 'k':
                    case 'l':
                    case 'm':
                    case 'o':
                    case 'p':
                    case 'q':
                    case 'r':
                    case 's':
                    case 'u':
                    case 'v':
                    case 'w':
                    case 'x':
                    case 'y':
                    case 'z':
                        return SYMBOL_FIRST;

                    // auto-generated by freditor.FlexerGenerator
                    case 'f':
                        return F;
                    case 'n':
                        return N;
                    case 't':
                        return T;

                    case '(':
                        return OPENING_PAREN;
                    case ')':
                        return CLOSING_PAREN;
                    case '[':
                        return OPENING_BRACKET;
                    case ']':
                        return CLOSING_BRACKET;
                    case '{':
                        return OPENING_BRACE;
                    case '}':
                        return CLOSING_BRACE;
                }
            case FIRST_SPACE:
            case NEXT_SPACE:
                switch (input) {
                    case ' ':
                    case ',':
                        return NEXT_SPACE;
                    default:
                        return END;
                }
            case COMMENT_FIRST:
            case COMMENT_NEXT:
                switch (input) {
                    case '\n':
                        return END;
                    default:
                        return COMMENT_NEXT;
                }
            case CHAR_CONSTANT_BEGIN:
            case CHAR_CONSTANT_INSIDE:
                return Character.isLetterOrDigit(input) ? CHAR_CONSTANT_INSIDE : CHAR_CONSTANT_END;

            case STRING_LITERAL_BEGIN:
            case STRING_LITERAL_INSIDE:
                switch (input) {
                    case '\\':
                        return STRING_LITERAL_ESCAPE;
                    default:
                        return STRING_LITERAL_INSIDE;
                    case '\"':
                        return STRING_LITERAL_END;
                }
            case STRING_LITERAL_ESCAPE:
                switch (input) {
                    default:
                        return STRING_LITERAL_INSIDE;
                    case '\n':
                        return ERROR;
                }
            case FIRST_DIGIT:
            case NEXT_DIGIT:
                switch (input) {
                    case '.':
                    case '/':

                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':

                    case 'A':
                    case 'B':
                    case 'C':
                    case 'D':
                    case 'E':
                    case 'F':
                    case 'N':
                    case 'R':
                    case 'X':

                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                    case 'n':
                    case 'r':
                    case 'x':
                        return NEXT_DIGIT;

                    default:
                        return END;
                }
            case SIGN:
                switch (input) {
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                        return NEXT_DIGIT;
                }
            case SYMBOL_FIRST:
            case SYMBOL_NEXT:
                // auto-generated by freditor.FlexerGenerator
            case FALSE:
            case NIL:
            case TRUE:
                return symbol(input);

            // auto-generated by freditor.FlexerGenerator
            case F:
                return input == 'a' ? FA : symbol(input);
            case FA:
                return input == 'l' ? FAL : symbol(input);
            case FAL:
                return input == 's' ? FALS : symbol(input);
            case FALS:
                return input == 'e' ? FALSE : symbol(input);
            case N:
                return input == 'i' ? NI : symbol(input);
            case NI:
                return input == 'l' ? NIL : symbol(input);
            case T:
                return input == 'r' ? TR : symbol(input);
            case TR:
                return input == 'u' ? TRU : symbol(input);
            case TRU:
                return input == 'e' ? TRUE : symbol(input);
        }
    }

    private int symbol(char input) {
        switch (input) {
            case '!':
            case '#':
            case '$':
            case '%':
            case '&':
            case '\'':
            case '*':
            case '+':
            case '-':
            case '.':
            case '/':

            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':

            case ':':
            case '<':
            case '=':
            case '>':
            case '?':

            case 'A':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'G':
            case 'H':
            case 'I':
            case 'J':
            case 'K':
            case 'L':
            case 'M':
            case 'N':
            case 'O':
            case 'P':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
            case 'U':
            case 'V':
            case 'W':
            case 'X':
            case 'Y':
            case 'Z':

            case '_':

            case 'a':
            case 'b':
            case 'c':
            case 'd':
            case 'e':
            case 'f':
            case 'g':
            case 'h':
            case 'i':
            case 'j':
            case 'k':
            case 'l':
            case 'm':
            case 'n':
            case 'o':
            case 'p':
            case 'q':
            case 'r':
            case 's':
            case 't':
            case 'u':
            case 'v':
            case 'w':
            case 'x':
            case 'y':
            case 'z':
                return SYMBOL_NEXT;

            default:
                return END;
        }
    }
}
